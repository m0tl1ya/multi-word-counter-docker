{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/containers/MultiWordCounter.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport TotalCountbar from '../components/TotalCountBar';\nimport CountingZone from '../components/CountingZone';\nimport * as CounterActions from '../actions/counterActions';\nimport * as ModeActions from '../actions/modeActions';\n\nconst MultiWordCounter = ({\n  counters,\n  mode,\n  actions\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, React.createElement(TotalCountbar, {\n  counters: counters,\n  addCounterTop: actions.counterActions.addCounterTop,\n  addCounterBelow: actions.counterActions.addCounterBelow,\n  refresh: actions.counterActions.refresh,\n  switchMode: actions.modeActions,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}), React.createElement(CountingZone, {\n  counters: counters,\n  actions: actions.counterActions,\n  mode: mode,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}));\n\nMultiWordCounter.propTypes = {\n  counters: PropTypes.arrayOf.isRequired,\n  mode: PropTypes.objectOf.isRequired,\n  actions: PropTypes.objectOf.isRequired\n};\n\nconst mapStateToProps = state => ({\n  counters: state.counters,\n  mode: state.mode\n}); // console.log(CreateModuleActions);\n\n\nconst mapDispatchToProps = dispatch => ({\n  actions: {\n    counterActions: bindActionCreators(CounterActions, dispatch),\n    modeActions: bindActionCreators(ModeActions, dispatch)\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiWordCounter);","map":{"version":3,"sources":["/usr/src/app/src/containers/MultiWordCounter.js"],"names":["React","PropTypes","bindActionCreators","connect","TotalCountbar","CountingZone","CounterActions","ModeActions","MultiWordCounter","counters","mode","actions","counterActions","addCounterTop","addCounterBelow","refresh","modeActions","propTypes","arrayOf","isRequired","objectOf","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAO,KAAKC,cAAZ,MAAgC,2BAAhC;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAD,KACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,aAAD;AACE,EAAA,QAAQ,EAAEF,QADZ;AAEE,EAAA,aAAa,EAAEE,OAAO,CAACC,cAAR,CAAuBC,aAFxC;AAGE,EAAA,eAAe,EAAEF,OAAO,CAACC,cAAR,CAAuBE,eAH1C;AAIE,EAAA,OAAO,EAAEH,OAAO,CAACC,cAAR,CAAuBG,OAJlC;AAKE,EAAA,UAAU,EAAEJ,OAAO,CAACK,WALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAQE,oBAAC,YAAD;AACE,EAAA,QAAQ,EAAEP,QADZ;AAEE,EAAA,OAAO,EAAEE,OAAO,CAACC,cAFnB;AAGE,EAAA,IAAI,EAAEF,IAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EARF,CADF;;AAiBAF,gBAAgB,CAACS,SAAjB,GAA6B;AAC3BR,EAAAA,QAAQ,EAAER,SAAS,CAACiB,OAAV,CAAkBC,UADD;AAE3BT,EAAAA,IAAI,EAAET,SAAS,CAACmB,QAAV,CAAmBD,UAFE;AAG3BR,EAAAA,OAAO,EAAEV,SAAS,CAACmB,QAAV,CAAmBD;AAHD,CAA7B;;AAMA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAChCb,EAAAA,QAAQ,EAAEa,KAAK,CAACb,QADgB;AAEhCC,EAAAA,IAAI,EAAEY,KAAK,CAACZ;AAFoB,CAAL,CAA7B,C,CAKA;;;AAEA,MAAMa,kBAAkB,GAAGC,QAAQ,KAAK;AACtCb,EAAAA,OAAO,EAAE;AACPC,IAAAA,cAAc,EAAEV,kBAAkB,CAACI,cAAD,EAAiBkB,QAAjB,CAD3B;AAEPR,IAAAA,WAAW,EAAEd,kBAAkB,CAACK,WAAD,EAAciB,QAAd;AAFxB;AAD6B,CAAL,CAAnC;;AAQA,eAAerB,OAAO,CAACkB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cf,gBAA7C,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport TotalCountbar from '../components/TotalCountBar';\nimport CountingZone from '../components/CountingZone';\nimport * as CounterActions from '../actions/counterActions';\nimport * as ModeActions from '../actions/modeActions';\n\nconst MultiWordCounter = ({ counters, mode, actions }) => (\n  <div>\n    <TotalCountbar\n      counters={counters}\n      addCounterTop={actions.counterActions.addCounterTop}\n      addCounterBelow={actions.counterActions.addCounterBelow}\n      refresh={actions.counterActions.refresh}\n      switchMode={actions.modeActions}\n    />\n    <CountingZone\n      counters={counters}\n      actions={actions.counterActions}\n      mode={mode}\n    />\n  </div>\n);\n\nMultiWordCounter.propTypes = {\n  counters: PropTypes.arrayOf.isRequired,\n  mode: PropTypes.objectOf.isRequired,\n  actions: PropTypes.objectOf.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  counters: state.counters,\n  mode: state.mode,\n});\n\n// console.log(CreateModuleActions);\n\nconst mapDispatchToProps = dispatch => ({\n  actions: {\n    counterActions: bindActionCreators(CounterActions, dispatch),\n    modeActions: bindActionCreators(ModeActions, dispatch),\n  },\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultiWordCounter);\n"]},"metadata":{},"sourceType":"module"}