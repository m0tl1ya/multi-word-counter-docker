{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/components/TotalCountBar.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'; // import AppBar from '@material-ui/core/AppBar';\n// import Toolbar from '@material-ui/core/Toolbar';\n\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button'; // import IconButton from '@material-ui/core/IconButton';\n// import Switch from '@material-ui/core/Switch';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nconst typeOfCounter = [{\n  value: 'Words',\n  label: 'Words'\n}, {\n  value: 'Characters',\n  label: 'Characters'\n}, {\n  value: 'Characters including space',\n  label: 'Characters including space'\n}];\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    display: 'flex',\n    margin: '0.5em',\n    alignItems: 'center'\n  },\n  addButton: {\n    color: 'white',\n    margin: '0.5em',\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)'\n  },\n  refreshButton: {\n    background: 'linear-gradient(45deg, #2196f3 30%, #21cbf3 90%)',\n    margin: '0.5em',\n    color: 'white',\n    backgroundColor: '#2196F3'\n  },\n  selectField: {\n    margin: '0.5em'\n  },\n  menu: {\n    width: 200\n  }\n});\n\nclass TotalCountBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        checked: event.target.checked\n      });\n    };\n\n    this.state = {\n      totalWords: 0,\n      totalCharacters: 0,\n      totalCharactersIncludingSpace: 0,\n      type: 'Characters',\n      checked: true\n    };\n    this.handleType = this.handleType.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this); // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let newTotalWords;\n    let newTotalCharacters;\n    let newTotalCharactersIncludingSpace; // console.log('length');\n    // console.log(nextProps.counters.length);\n    // console.log(nextProps.counters);\n\n    if (nextProps.counters.length === 1) {\n      newTotalWords = nextProps.counters[0].words;\n      newTotalCharacters = nextProps.counters[0].characters;\n      newTotalCharactersIncludingSpace = nextProps.counters[0].allCharacters;\n    }\n\n    if (nextProps.counters.length === 0) {\n      newTotalWords = 0;\n      newTotalCharacters = 0;\n      newTotalCharactersIncludingSpace = 0;\n    }\n\n    if (nextProps.counters.length > 1) {\n      newTotalWords = nextProps.counters.reduce((sum, counter) => sum += counter.words, 0);\n      newTotalCharacters = nextProps.counters.reduce((sum, counter) => sum += counter.characters, 0);\n      newTotalCharactersIncludingSpace = nextProps.counters.reduce((sum, counter) => sum += counter.allCharacters, 0); // console.log(newTotalCharacters);\n    } // console.log(newTotalWords);\n\n\n    this.setState({\n      totalWords: newTotalWords\n    });\n    this.setState({\n      totalCharacters: newTotalCharacters\n    });\n    this.setState({\n      totalCharactersIncludingSpace: newTotalCharactersIncludingSpace\n    });\n  }\n\n  handleType(event) {\n    // this.props.editParameterType(id, event.target.value);\n    this.setState({\n      type: event.target.value\n    });\n    this.props.switchMode.switchType(event.target.value);\n  }\n\n  handleClick() {\n    if (this.state.checked) {\n      this.props.addCounterBelow();\n    } else {\n      this.props.addCounterTop();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          refresh = _this$props.refresh;\n    const _this$state = this.state,\n          totalWords = _this$state.totalWords,\n          totalCharacters = _this$state.totalCharacters,\n          totalCharactersIncludingSpace = _this$state.totalCharactersIncludingSpace;\n    let element;\n\n    if (this.state.type === 'Words') {\n      if (totalWords > 0) {\n        element = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, totalWords, \" words\");\n      } else {\n        element = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, totalWords, \" word\");\n      }\n    }\n\n    if (this.state.type === 'Characters') {\n      if (totalCharacters > 0) {\n        element = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, totalCharacters, \" characters\");\n      } else {\n        element = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, totalCharacters, \" character\");\n      }\n    }\n\n    if (this.state.type === 'Characters including space') {\n      if (totalCharactersIncludingSpace > 0) {\n        element = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, totalCharactersIncludingSpace, \" characters (space)\");\n      } else {\n        element = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, totalCharactersIncludingSpace, \" character (space)\");\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"title\",\n      color: \"inherit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, element), React.createElement(TextField, {\n      id: \"select-type\",\n      select: true,\n      className: classes.selectField,\n      value: this.state.type,\n      onChange: this.handleType,\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, typeOfCounter.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, option.label))), React.createElement(Button, {\n      variant: \"raised\",\n      color: \"secondary\",\n      className: classes.addButton,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Add\"), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        checked: this.state.checked,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }),\n      label: \"Add below\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"raised\",\n      color: \"primary\",\n      className: classes.refreshButton,\n      onClick: () => refresh(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Refresh\"));\n  }\n\n}\n\nTotalCountBar.propTypes = {\n  classes: PropTypes.objectOf.isRequired,\n  counters: PropTypes.arrayOf.isRequired,\n  addCounterTop: PropTypes.func.isRequired,\n  addCounterBelow: PropTypes.func.isRequired,\n  refresh: PropTypes.func.isRequired,\n  switchMode: PropTypes.objectOf.isRequired\n};\nexport default withStyles(styles)(TotalCountBar);","map":{"version":3,"sources":["/usr/src/app/src/components/TotalCountBar.js"],"names":["React","Component","PropTypes","withStyles","Typography","Button","FormControlLabel","TextField","MenuItem","Checkbox","typeOfCounter","value","label","styles","theme","root","width","display","margin","alignItems","addButton","color","background","refreshButton","backgroundColor","selectField","menu","TotalCountBar","constructor","props","handleChange","event","setState","checked","target","state","totalWords","totalCharacters","totalCharactersIncludingSpace","type","handleType","bind","handleClick","componentWillReceiveProps","nextProps","newTotalWords","newTotalCharacters","newTotalCharactersIncludingSpace","counters","length","words","characters","allCharacters","reduce","sum","counter","switchMode","switchType","addCounterBelow","addCounterTop","render","classes","refresh","element","MenuProps","className","map","option","propTypes","objectOf","isRequired","arrayOf","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n// import AppBar from '@material-ui/core/AppBar';\n// import Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst typeOfCounter= [\n  {\n    value: 'Words',\n    label: 'Words',\n  },\n  {\n    value: 'Characters',\n    label: 'Characters',\n  },\n  {\n    value: 'Characters including space',\n    label: 'Characters including space',\n  },\n];\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    display: 'flex',\n    margin: '0.5em',\n    alignItems: 'center',\n  },\n  addButton: {\n    color: 'white',\n    margin: '0.5em',\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)'\n  },\n  refreshButton: {\n    background: 'linear-gradient(45deg, #2196f3 30%, #21cbf3 90%)',\n    margin: '0.5em',\n    color: 'white',\n    backgroundColor: '#2196F3',\n  },\n  selectField: {\n    margin: '0.5em',\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nclass TotalCountBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalWords: 0,\n      totalCharacters: 0,\n      totalCharactersIncludingSpace: 0,\n      type: 'Characters',\n      checked: true,\n    };\n    this.handleType = this.handleType.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let newTotalWords;\n    let newTotalCharacters;\n    let newTotalCharactersIncludingSpace;\n    // console.log('length');\n    // console.log(nextProps.counters.length);\n    // console.log(nextProps.counters);\n    if (nextProps.counters.length === 1) {\n      newTotalWords = nextProps.counters[0].words;\n      newTotalCharacters = nextProps.counters[0].characters;\n      newTotalCharactersIncludingSpace = nextProps.counters[0].allCharacters;\n    }\n    if (nextProps.counters.length === 0) {\n      newTotalWords = 0;\n      newTotalCharacters = 0;\n      newTotalCharactersIncludingSpace = 0;\n    }\n    if (nextProps.counters.length > 1) {\n      newTotalWords = nextProps.counters.reduce((sum, counter) => sum += counter.words, 0);\n      newTotalCharacters = nextProps.counters.reduce((sum, counter) => sum += counter.characters, 0);\n      newTotalCharactersIncludingSpace = nextProps.counters.reduce((sum, counter) => sum += counter.allCharacters, 0);\n\n      // console.log(newTotalCharacters);\n    }\n    // console.log(newTotalWords);\n    this.setState({ totalWords: newTotalWords });\n    this.setState({ totalCharacters: newTotalCharacters });\n    this.setState({ totalCharactersIncludingSpace: newTotalCharactersIncludingSpace });\n  }\n\n  handleType(event) {\n    // this.props.editParameterType(id, event.target.value);\n    this.setState({\n      type: event.target.value,\n    });\n    this.props.switchMode.switchType(event.target.value);\n  }\n\n  handleChange = event => {\n    this.setState({ checked: event.target.checked });\n  }\n\n  handleClick() {\n    if (this.state.checked) {\n      this.props.addCounterBelow();\n    } else {\n      this.props.addCounterTop();\n    }\n  }\n\n  render() {\n    const { classes, refresh } = this.props;\n    const {\n      totalWords,\n      totalCharacters,\n      totalCharactersIncludingSpace,\n    } = this.state;\n\n    let element;\n    if (this.state.type === 'Words') {\n      if (totalWords > 0) {\n        element = (\n          <span>\n            {totalWords} words\n          </span>\n        );\n      } else {\n        element = (\n          <span>\n            {totalWords} word\n          </span>\n        );\n      }\n    }\n    if (this.state.type === 'Characters') {\n      if (totalCharacters > 0) {\n        element = (\n          <span>\n            {totalCharacters} characters\n          </span>\n        );\n      } else {\n        element = (\n          <span>\n            {totalCharacters} character\n          </span>\n        );\n      }\n    }\n    if (this.state.type === 'Characters including space') {\n      if (totalCharactersIncludingSpace > 0) {\n        element = (\n          <span>\n            {totalCharactersIncludingSpace} characters (space)\n          </span>\n        );\n      } else {\n        element = (\n          <span>\n            {totalCharactersIncludingSpace} character (space)\n          </span>\n        );\n      }\n    }\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"title\" color=\"inherit\">\n          {element}\n        </Typography>\n        <TextField\n          id=\"select-type\"\n          select\n          className={classes.selectField}\n          value={this.state.type}\n          onChange={this.handleType}\n          SelectProps={{\n            MenuProps: {\n              className: classes.menu,\n            },\n          }}\n          margin=\"normal\"\n        >\n          {typeOfCounter.map(option => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <Button\n          variant=\"raised\"\n          color=\"secondary\"\n          className={classes.addButton}\n          onClick={this.handleClick}\n        >\n          Add\n        </Button>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={this.state.checked}\n              onChange={this.handleChange}\n            />\n          }\n          label=\"Add below\"\n        />\n        <Button\n          variant=\"raised\"\n          color=\"primary\"\n          className={classes.refreshButton}\n          onClick={() => refresh()}\n        >\n          Refresh\n        </Button>\n      </div>\n    );\n  }\n}\n\n\nTotalCountBar.propTypes = {\n  classes: PropTypes.objectOf.isRequired,\n  counters: PropTypes.arrayOf.isRequired,\n  addCounterTop: PropTypes.func.isRequired,\n  addCounterBelow: PropTypes.func.isRequired,\n  refresh: PropTypes.func.isRequired,\n  switchMode: PropTypes.objectOf.isRequired,\n};\n\nexport default withStyles(styles)(TotalCountBar);\n"]},"metadata":{},"sourceType":"module"}