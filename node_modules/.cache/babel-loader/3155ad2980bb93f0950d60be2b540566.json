{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/components/WordCounter.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { withStyles } from 'material-ui/styles';\nimport Paper from 'material-ui/Paper';\nimport WordCounterHeader from './WordCounterHeader';\nimport TextInput from './TextInput';\n\nconst styles = theme => ({\n  root: theme.mixins.gutters({\n    paddingTop: 2,\n    paddingBottom: 2,\n    marginTop: theme.spacing.unit,\n    width: '80%',\n    marginLeft: '1em',\n    display: 'flex',\n    flexWrap: 'wrap'\n  }),\n  textField: {\n    width: '100%',\n    marginLeft: '0.2em' // marginLeft: '2em',\n    // marginBottom: '0.9em',\n    // marginRight: theme.spacing.unit,\n\n  }\n});\n\nclass WordCounter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: this.props.counter.text,\n      words: this.props.counter.words,\n      characters: this.props.counter.characters,\n      allCharacters: this.props.counter.characters,\n      isCounted: this.props.counter.isCounted\n    };\n    this.handleText = this.handleText.bind(this);\n    this.handleState = this.handleState.bind(this); // this.countWords = this.countWords.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // this.setState({ text: nextProps.counter.text });\n    this.setState({\n      words: nextProps.counter.words\n    });\n    this.setState({\n      characters: nextProps.counter.characters\n    });\n    this.setState({\n      allCharacters: nextProps.counter.allCharacters\n    });\n    this.setState({\n      isCounted: nextProps.counter.isCounted\n    });\n  }\n\n  handleText(text) {\n    if (this.state.isCounted) {\n      const arrayOfWords = text.match(/\\S+/g);\n      const arrayOfCharacterss = text.match(/\\S/g);\n      let wordsOfText;\n      let characterOfText;\n\n      if (arrayOfWords != null) {\n        wordsOfText = arrayOfWords.length;\n      } else {\n        wordsOfText = 0;\n      }\n\n      if (arrayOfCharacterss != null) {\n        characterOfText = arrayOfCharacterss.length;\n      } else {\n        characterOfText = 0;\n      }\n\n      this.props.actions.editCounter(this.props.counter.id, text, wordsOfText, characterOfText, text.length, true);\n    } else {\n      this.props.actions.editCounter(this.props.counter.id, text, 0, 0, 0, false);\n    }\n  }\n\n  handleState() {\n    if (this.state.isCounted) {\n      // this.setState({ isCounted: false });\n      this.props.actions.editCounter(this.props.counter.id, this.props.counter.text, 0, 0, false);\n    } else {\n      // this.setState({ isCounted: true });\n      const arrayOfWords = this.props.counter.text.match(/\\S+/g);\n      const arrayOfCharacterss = this.props.counter.text.match(/\\S/g);\n      let wordsOfText;\n      let characterOfText;\n      const allCharactersOfText = this.props.counter.text.length;\n\n      if (arrayOfWords != null) {\n        wordsOfText = arrayOfWords.length;\n      } else {\n        wordsOfText = 0;\n      }\n\n      if (arrayOfCharacterss != null) {\n        characterOfText = arrayOfCharacterss.length;\n      } else {\n        characterOfText = 0;\n      }\n\n      this.props.actions.editCounter(this.props.counter.id, this.props.counter.text, wordsOfText, characterOfText, allCharactersOfText, true);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          counter = _this$props.counter,\n          actions = _this$props.actions,\n          mode = _this$props.mode;\n    return React.createElement(Paper, {\n      className: classes.root,\n      elevation: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(WordCounterHeader, {\n      deleteCounter: actions.deleteCounter,\n      id: counter.id,\n      words: this.state.words,\n      characters: this.state.characters,\n      textLength: this.state.allCharacters,\n      switchCount: this.handleState,\n      onActive: counter.isCounted,\n      displayMode: mode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: classes.textField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(TextInput, {\n      text: counter.text,\n      edit: this.handleText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })));\n  }\n\n}\n\nWordCounter.propTypes = {\n  classes: PropTypes.objectOf.isRequired,\n  counter: PropTypes.objectOf.isRequired,\n  actions: PropTypes.objectOf.isRequired,\n  mode: PropTypes.objectOf.isRequired\n};\nexport default withStyles(styles)(WordCounter);","map":{"version":3,"sources":["/usr/src/app/src/components/WordCounter.js"],"names":["React","Component","PropTypes","classnames","withStyles","Paper","WordCounterHeader","TextInput","styles","theme","root","mixins","gutters","paddingTop","paddingBottom","marginTop","spacing","unit","width","marginLeft","display","flexWrap","textField","WordCounter","constructor","props","state","text","counter","words","characters","allCharacters","isCounted","handleText","bind","handleState","componentWillReceiveProps","nextProps","setState","arrayOfWords","match","arrayOfCharacterss","wordsOfText","characterOfText","length","actions","editCounter","id","allCharactersOfText","render","classes","mode","deleteCounter","propTypes","objectOf","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport { withStyles } from 'material-ui/styles';\n\nimport Paper from 'material-ui/Paper';\n\nimport WordCounterHeader from './WordCounterHeader';\nimport TextInput from './TextInput';\n\nconst styles = theme => ({\n  root: theme.mixins.gutters({\n    paddingTop: 2,\n    paddingBottom: 2,\n    marginTop: theme.spacing.unit,\n    width: '80%',\n    marginLeft: '1em',\n    display: 'flex',\n    flexWrap: 'wrap',\n  }),\n  textField: {\n    width: '100%',\n    marginLeft: '0.2em',\n    // marginLeft: '2em',\n    // marginBottom: '0.9em',\n    // marginRight: theme.spacing.unit,\n  },\n});\n\n\nclass WordCounter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: this.props.counter.text,\n      words: this.props.counter.words,\n      characters: this.props.counter.characters,\n      allCharacters: this.props.counter.characters,\n      isCounted: this.props.counter.isCounted,\n    };\n    this.handleText = this.handleText.bind(this);\n    this.handleState = this.handleState.bind(this);\n    // this.countWords = this.countWords.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // this.setState({ text: nextProps.counter.text });\n    this.setState({ words: nextProps.counter.words });\n    this.setState({ characters: nextProps.counter.characters });\n    this.setState({ allCharacters: nextProps.counter.allCharacters });\n    this.setState({ isCounted: nextProps.counter.isCounted });\n  }\n\n  handleText(text) {\n    if (this.state.isCounted) {\n      const arrayOfWords = text.match(/\\S+/g);\n      const arrayOfCharacterss = text.match(/\\S/g);\n\n      let wordsOfText;\n      let characterOfText;\n      if (arrayOfWords != null) {\n        wordsOfText = arrayOfWords.length;\n      } else {\n        wordsOfText = 0;\n      }\n      if (arrayOfCharacterss != null) {\n        characterOfText = arrayOfCharacterss.length;\n      } else {\n        characterOfText = 0;\n      }\n      this.props.actions.editCounter(\n        this.props.counter.id,\n        text,\n        wordsOfText,\n        characterOfText,\n        text.length,\n        true\n      );\n    } else {\n      this.props.actions.editCounter(\n        this.props.counter.id,\n        text,\n        0,\n        0,\n        0,\n        false\n      );\n    }\n  }\n\n  handleState() {\n    if (this.state.isCounted) {\n      // this.setState({ isCounted: false });\n      this.props.actions.editCounter(this.props.counter.id, this.props.counter.text, 0, 0, false);\n    } else {\n      // this.setState({ isCounted: true });\n      const arrayOfWords = this.props.counter.text.match(/\\S+/g);\n      const arrayOfCharacterss = this.props.counter.text.match(/\\S/g);\n\n      let wordsOfText;\n      let characterOfText;\n      const allCharactersOfText = this.props.counter.text.length;\n      if (arrayOfWords != null) {\n        wordsOfText = arrayOfWords.length;\n      } else {\n        wordsOfText = 0;\n      }\n      if (arrayOfCharacterss != null) {\n        characterOfText = arrayOfCharacterss.length;\n      } else {\n        characterOfText = 0;\n      }\n      this.props.actions.editCounter(\n        this.props.counter.id,\n        this.props.counter.text,\n        wordsOfText,\n        characterOfText,\n        allCharactersOfText,\n        true\n      );\n    }\n  }\n\n  render() {\n    const { classes, counter, actions, mode } = this.props;\n    return (\n      <Paper className={classes.root} elevation={4}>\n        <div>\n          <WordCounterHeader\n            deleteCounter={actions.deleteCounter}\n            id={counter.id}\n            words={this.state.words}\n            characters={this.state.characters}\n            textLength={this.state.allCharacters}\n            switchCount={this.handleState}\n            onActive={counter.isCounted}\n            displayMode={mode}\n          />\n        </div>\n        <div className={classes.textField}>\n          <TextInput\n            text={counter.text}\n            edit={this.handleText}\n          />\n        </div>\n      </Paper>\n    );\n  }\n}\n\nWordCounter.propTypes = {\n  classes: PropTypes.objectOf.isRequired,\n  counter: PropTypes.objectOf.isRequired,\n  actions: PropTypes.objectOf.isRequired,\n  mode: PropTypes.objectOf.isRequired,\n};\n\nexport default withStyles(styles)(WordCounter);\n"]},"metadata":{},"sourceType":"module"}