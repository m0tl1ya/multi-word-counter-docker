{"ast":null,"code":"import _objectSpread from \"/usr/src/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_COUNTER_TOP, ADD_COUNTER_BELOW, DELETE_COUNTER, EDIT_COUNTER, REFRESH } from '../actions/counterActions';\nconst initialState = [{\n  id: 0,\n  text: '',\n  words: 0,\n  characters: 0,\n  allCharacters: 0,\n  isCounted: true\n}];\n\nfunction counters(state = initialState, action) {\n  switch (action.type) {\n    case ADD_COUNTER_TOP:\n      return [{\n        id: state.reduce((maxId, counter) => Math.max(counter.id, maxId), -1) + 1,\n        text: '',\n        words: 0,\n        characters: 0,\n        allCharacters: 0,\n        isCounted: true\n      }, ...state];\n\n    case ADD_COUNTER_BELOW:\n      return [...state, {\n        id: state.reduce((maxId, counter) => Math.max(counter.id, maxId), -1) + 1,\n        text: '',\n        words: 0,\n        characters: 0,\n        allCharacters: 0,\n        isCounted: true\n      }];\n\n    case DELETE_COUNTER:\n      return state.filter(counter => counter.id !== action.id);\n\n    case EDIT_COUNTER:\n      return state.map(counter => counter.id === action.id ? _objectSpread({}, counter, {\n        text: action.text,\n        words: action.words,\n        characters: action.characters,\n        allCharacters: action.allCharacters,\n        isCounted: action.isCounted\n      }) : counter);\n\n    case REFRESH:\n      return state.filter(counter => counter.id === -1);\n\n    default:\n      return state;\n  }\n}\n\nexport default counters;","map":{"version":3,"sources":["/usr/src/app/src/reducers/counters.js"],"names":["ADD_COUNTER_TOP","ADD_COUNTER_BELOW","DELETE_COUNTER","EDIT_COUNTER","REFRESH","initialState","id","text","words","characters","allCharacters","isCounted","counters","state","action","type","reduce","maxId","counter","Math","max","filter","map"],"mappings":";AAAA,SACIA,eADJ,EAEIC,iBAFJ,EAGIC,cAHJ,EAIIC,YAJJ,EAKIC,OALJ,QAMS,2BANT;AAQE,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,EAFR;AAGEC,EAAAA,KAAK,EAAE,CAHT;AAIEC,EAAAA,UAAU,EAAE,CAJd;AAKEC,EAAAA,aAAa,EAAE,CALjB;AAMEC,EAAAA,SAAS,EAAE;AANb,CADmB,CAArB;;AAWA,SAASC,QAAT,CAAkBC,KAAK,GAAGR,YAA1B,EAAwCS,MAAxC,EAAgD;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,eAAL;AACE,aAAO,CACL;AACEM,QAAAA,EAAE,EAAEO,KAAK,CAACG,MAAN,CAAa,CAACC,KAAD,EAAQC,OAAR,KAAoBC,IAAI,CAACC,GAAL,CAASF,OAAO,CAACZ,EAAjB,EAAqBW,KAArB,CAAjC,EAA8D,CAAC,CAA/D,IAAoE,CAD1E;AAEEV,QAAAA,IAAI,EAAE,EAFR;AAGEC,QAAAA,KAAK,EAAE,CAHT;AAIEC,QAAAA,UAAU,EAAE,CAJd;AAKEC,QAAAA,aAAa,EAAE,CALjB;AAMEC,QAAAA,SAAS,EAAE;AANb,OADK,EASL,GAAGE,KATE,CAAP;;AAWF,SAAKZ,iBAAL;AACE,aAAO,CACL,GAAGY,KADE,EAEL;AACEP,QAAAA,EAAE,EAAEO,KAAK,CAACG,MAAN,CAAa,CAACC,KAAD,EAAQC,OAAR,KAAoBC,IAAI,CAACC,GAAL,CAASF,OAAO,CAACZ,EAAjB,EAAqBW,KAArB,CAAjC,EAA8D,CAAC,CAA/D,IAAoE,CAD1E;AAEEV,QAAAA,IAAI,EAAE,EAFR;AAGEC,QAAAA,KAAK,EAAE,CAHT;AAIEC,QAAAA,UAAU,EAAE,CAJd;AAKEC,QAAAA,aAAa,EAAE,CALjB;AAMEC,QAAAA,SAAS,EAAE;AANb,OAFK,CAAP;;AAWF,SAAKT,cAAL;AACE,aAAOW,KAAK,CAACQ,MAAN,CAAaH,OAAO,IACzBA,OAAO,CAACZ,EAAR,KAAeQ,MAAM,CAACR,EADjB,CAAP;;AAGF,SAAKH,YAAL;AACE,aAAOU,KAAK,CAACS,GAAN,CAAUJ,OAAO,IACtBA,OAAO,CAACZ,EAAR,KAAeQ,MAAM,CAACR,EAAtB,qBAEKY,OAFL;AAGEX,QAAAA,IAAI,EAAEO,MAAM,CAACP,IAHf;AAIEC,QAAAA,KAAK,EAAEM,MAAM,CAACN,KAJhB;AAKEC,QAAAA,UAAU,EAAEK,MAAM,CAACL,UALrB;AAMEC,QAAAA,aAAa,EAAEI,MAAM,CAACJ,aANxB;AAOEC,QAAAA,SAAS,EAAEG,MAAM,CAACH;AAPpB,WASAO,OAVK,CAAP;;AAYF,SAAKd,OAAL;AACE,aAAOS,KAAK,CAACQ,MAAN,CAAaH,OAAO,IACzBA,OAAO,CAACZ,EAAR,KAAe,CAAC,CADX,CAAP;;AAGF;AACE,aAAOO,KAAP;AA/CJ;AAiDD;;AAED,eAAeD,QAAf","sourcesContent":["import {\n    ADD_COUNTER_TOP,\n    ADD_COUNTER_BELOW,\n    DELETE_COUNTER,\n    EDIT_COUNTER,\n    REFRESH,\n  } from '../actions/counterActions';\n  \n  const initialState = [\n    {\n      id: 0,\n      text: '',\n      words: 0,\n      characters: 0,\n      allCharacters: 0,\n      isCounted: true,\n    },\n  ];\n  \n  function counters(state = initialState, action) {\n    switch (action.type) {\n      case ADD_COUNTER_TOP:\n        return [\n          {\n            id: state.reduce((maxId, counter) => Math.max(counter.id, maxId), -1) + 1,\n            text: '',\n            words: 0,\n            characters: 0,\n            allCharacters: 0,\n            isCounted: true,\n          },\n          ...state,\n        ];\n      case ADD_COUNTER_BELOW:\n        return [\n          ...state,\n          {\n            id: state.reduce((maxId, counter) => Math.max(counter.id, maxId), -1) + 1,\n            text: '',\n            words: 0,\n            characters: 0,\n            allCharacters: 0,\n            isCounted: true,\n          },\n        ];\n      case DELETE_COUNTER:\n        return state.filter(counter =>\n          counter.id !== action.id);\n  \n      case EDIT_COUNTER:\n        return state.map(counter =>\n          counter.id === action.id ?\n          {\n            ...counter,\n            text: action.text,\n            words: action.words,\n            characters: action.characters,\n            allCharacters: action.allCharacters,\n            isCounted: action.isCounted,\n          } :\n          counter);\n  \n      case REFRESH:\n        return state.filter(counter =>\n          counter.id === -1);\n  \n      default:\n        return state;\n    }\n  }\n  \n  export default counters;\n  "]},"metadata":{},"sourceType":"module"}